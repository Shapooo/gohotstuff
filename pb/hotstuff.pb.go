// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hotstuff.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are valid to be assigned to Sum:
	//	*Message_Proposal
	//	*Message_Vote
	//	*Message_Timeout
	Sum                  isMessage_Sum `protobuf_oneof:"sum"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_8517aa0e19c54851, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Sum interface {
	isMessage_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_Proposal struct {
	Proposal *ProposalMessage `protobuf:"bytes,2,opt,name=proposal,proto3,oneof" json:"proposal,omitempty"`
}
type Message_Vote struct {
	Vote *VoteMessage `protobuf:"bytes,3,opt,name=vote,proto3,oneof" json:"vote,omitempty"`
}
type Message_Timeout struct {
	Timeout *TimoutMessage `protobuf:"bytes,4,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
}

func (*Message_Proposal) isMessage_Sum() {}
func (*Message_Vote) isMessage_Sum()     {}
func (*Message_Timeout) isMessage_Sum()  {}

func (m *Message) GetSum() isMessage_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *Message) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *Message) GetProposal() *ProposalMessage {
	if x, ok := m.GetSum().(*Message_Proposal); ok {
		return x.Proposal
	}
	return nil
}

func (m *Message) GetVote() *VoteMessage {
	if x, ok := m.GetSum().(*Message_Vote); ok {
		return x.Vote
	}
	return nil
}

func (m *Message) GetTimeout() *TimoutMessage {
	if x, ok := m.GetSum().(*Message_Timeout); ok {
		return x.Timeout
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_Proposal)(nil),
		(*Message_Vote)(nil),
		(*Message_Timeout)(nil),
	}
}

type ProposalMessage struct {
	Module               string   `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Round                int64    `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Id                   []byte   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp            int64    `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Pid                  []byte   `protobuf:"bytes,5,opt,name=pid,proto3" json:"pid,omitempty"`
	Pk                   []byte   `protobuf:"bytes,6,opt,name=pk,proto3" json:"pk,omitempty"`
	Signature            []byte   `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
	Justify              []byte   `protobuf:"bytes,8,opt,name=justify,proto3" json:"justify,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProposalMessage) Reset()         { *m = ProposalMessage{} }
func (m *ProposalMessage) String() string { return proto.CompactTextString(m) }
func (*ProposalMessage) ProtoMessage()    {}
func (*ProposalMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8517aa0e19c54851, []int{1}
}
func (m *ProposalMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalMessage.Merge(m, src)
}
func (m *ProposalMessage) XXX_Size() int {
	return m.Size()
}
func (m *ProposalMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalMessage proto.InternalMessageInfo

func (m *ProposalMessage) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *ProposalMessage) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *ProposalMessage) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ProposalMessage) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ProposalMessage) GetPid() []byte {
	if m != nil {
		return m.Pid
	}
	return nil
}

func (m *ProposalMessage) GetPk() []byte {
	if m != nil {
		return m.Pk
	}
	return nil
}

func (m *ProposalMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ProposalMessage) GetJustify() []byte {
	if m != nil {
		return m.Justify
	}
	return nil
}

type VoteMessage struct {
	Module               string    `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	VoteInfo             *VoteInfo `protobuf:"bytes,2,opt,name=vote_info,json=voteInfo,proto3" json:"vote_info,omitempty"`
	CommitInfo           []byte    `protobuf:"bytes,3,opt,name=commit_info,json=commitInfo,proto3" json:"commit_info,omitempty"`
	Timestamp            int64     `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Pid                  []byte    `protobuf:"bytes,5,opt,name=pid,proto3" json:"pid,omitempty"`
	Pk                   []byte    `protobuf:"bytes,6,opt,name=pk,proto3" json:"pk,omitempty"`
	Signature            []byte    `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *VoteMessage) Reset()         { *m = VoteMessage{} }
func (m *VoteMessage) String() string { return proto.CompactTextString(m) }
func (*VoteMessage) ProtoMessage()    {}
func (*VoteMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8517aa0e19c54851, []int{2}
}
func (m *VoteMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteMessage.Merge(m, src)
}
func (m *VoteMessage) XXX_Size() int {
	return m.Size()
}
func (m *VoteMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VoteMessage proto.InternalMessageInfo

func (m *VoteMessage) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *VoteMessage) GetVoteInfo() *VoteInfo {
	if m != nil {
		return m.VoteInfo
	}
	return nil
}

func (m *VoteMessage) GetCommitInfo() []byte {
	if m != nil {
		return m.CommitInfo
	}
	return nil
}

func (m *VoteMessage) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *VoteMessage) GetPid() []byte {
	if m != nil {
		return m.Pid
	}
	return nil
}

func (m *VoteMessage) GetPk() []byte {
	if m != nil {
		return m.Pk
	}
	return nil
}

func (m *VoteMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type VoteInfo struct {
	ProposalRound        int64    `protobuf:"varint,1,opt,name=proposal_round,json=proposalRound,proto3" json:"proposal_round,omitempty"`
	ProposalId           []byte   `protobuf:"bytes,2,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	ParentRound          int64    `protobuf:"varint,3,opt,name=parent_round,json=parentRound,proto3" json:"parent_round,omitempty"`
	ParentId             []byte   `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteInfo) Reset()         { *m = VoteInfo{} }
func (m *VoteInfo) String() string { return proto.CompactTextString(m) }
func (*VoteInfo) ProtoMessage()    {}
func (*VoteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8517aa0e19c54851, []int{3}
}
func (m *VoteInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteInfo.Merge(m, src)
}
func (m *VoteInfo) XXX_Size() int {
	return m.Size()
}
func (m *VoteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VoteInfo proto.InternalMessageInfo

func (m *VoteInfo) GetProposalRound() int64 {
	if m != nil {
		return m.ProposalRound
	}
	return 0
}

func (m *VoteInfo) GetProposalId() []byte {
	if m != nil {
		return m.ProposalId
	}
	return nil
}

func (m *VoteInfo) GetParentRound() int64 {
	if m != nil {
		return m.ParentRound
	}
	return 0
}

func (m *VoteInfo) GetParentId() []byte {
	if m != nil {
		return m.ParentId
	}
	return nil
}

type TimoutMessage struct {
	Module               string   `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Round                int64    `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	ParentRound          int64    `protobuf:"varint,3,opt,name=parent_round,json=parentRound,proto3" json:"parent_round,omitempty"`
	ParentId             []byte   `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Index                int64    `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	Timestamp            int64    `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Pid                  []byte   `protobuf:"bytes,7,opt,name=pid,proto3" json:"pid,omitempty"`
	Pk                   []byte   `protobuf:"bytes,8,opt,name=pk,proto3" json:"pk,omitempty"`
	Signature            []byte   `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimoutMessage) Reset()         { *m = TimoutMessage{} }
func (m *TimoutMessage) String() string { return proto.CompactTextString(m) }
func (*TimoutMessage) ProtoMessage()    {}
func (*TimoutMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8517aa0e19c54851, []int{4}
}
func (m *TimoutMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimoutMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimoutMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimoutMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimoutMessage.Merge(m, src)
}
func (m *TimoutMessage) XXX_Size() int {
	return m.Size()
}
func (m *TimoutMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TimoutMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TimoutMessage proto.InternalMessageInfo

func (m *TimoutMessage) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *TimoutMessage) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *TimoutMessage) GetParentRound() int64 {
	if m != nil {
		return m.ParentRound
	}
	return 0
}

func (m *TimoutMessage) GetParentId() []byte {
	if m != nil {
		return m.ParentId
	}
	return nil
}

func (m *TimoutMessage) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TimoutMessage) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TimoutMessage) GetPid() []byte {
	if m != nil {
		return m.Pid
	}
	return nil
}

func (m *TimoutMessage) GetPk() []byte {
	if m != nil {
		return m.Pk
	}
	return nil
}

func (m *TimoutMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "gohotstuff.pb.Message")
	proto.RegisterType((*ProposalMessage)(nil), "gohotstuff.pb.ProposalMessage")
	proto.RegisterType((*VoteMessage)(nil), "gohotstuff.pb.VoteMessage")
	proto.RegisterType((*VoteInfo)(nil), "gohotstuff.pb.VoteInfo")
	proto.RegisterType((*TimoutMessage)(nil), "gohotstuff.pb.TimoutMessage")
}

func init() { proto.RegisterFile("hotstuff.proto", fileDescriptor_8517aa0e19c54851) }

var fileDescriptor_8517aa0e19c54851 = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x41, 0x8b, 0xd4, 0x30,
	0x14, 0xde, 0x4c, 0x67, 0xa6, 0xed, 0xeb, 0xcc, 0x28, 0x41, 0xd6, 0xa0, 0x4b, 0x77, 0x2d, 0x08,
	0x7b, 0x2a, 0xa2, 0x1e, 0x04, 0x3d, 0xed, 0xc9, 0x39, 0x08, 0x12, 0xc4, 0x83, 0x97, 0xa5, 0x63,
	0xd2, 0x31, 0xee, 0xb6, 0x09, 0x6d, 0xb2, 0xe8, 0xdf, 0xf0, 0xe4, 0x3f, 0xd2, 0xa3, 0x78, 0xf4,
	0x24, 0xe3, 0x2f, 0xf0, 0x1f, 0x48, 0x93, 0x76, 0xeb, 0x94, 0x9d, 0x83, 0xc8, 0xde, 0xfa, 0xbe,
	0xbc, 0xef, 0xcb, 0xfb, 0xde, 0x17, 0x0a, 0x8b, 0x77, 0x52, 0xd7, 0xda, 0xe4, 0x79, 0xaa, 0x2a,
	0xa9, 0x25, 0x9e, 0xaf, 0x65, 0x8f, 0xac, 0x92, 0xef, 0x08, 0xfc, 0x17, 0xbc, 0xae, 0xb3, 0x35,
	0xc7, 0xfb, 0x30, 0x2d, 0x24, 0x33, 0xe7, 0x9c, 0xa0, 0x23, 0x74, 0x1c, 0xd2, 0xb6, 0xc2, 0xcf,
	0x20, 0x50, 0x95, 0x54, 0xb2, 0xce, 0xce, 0xc9, 0xe8, 0x08, 0x1d, 0x47, 0x0f, 0xe3, 0x74, 0x4b,
	0x25, 0x7d, 0xd9, 0x1e, 0xb7, 0x4a, 0xcf, 0xf7, 0xe8, 0x25, 0x03, 0x3f, 0x80, 0xf1, 0x85, 0xd4,
	0x9c, 0x78, 0x96, 0x79, 0x67, 0xc0, 0x7c, 0x2d, 0x35, 0xef, 0x59, 0xb6, 0x13, 0x3f, 0x01, 0x5f,
	0x8b, 0x82, 0x4b, 0xa3, 0xc9, 0xd8, 0x92, 0x0e, 0x06, 0xa4, 0x57, 0xa2, 0x90, 0x46, 0xf7, 0xb4,
	0xae, 0xfd, 0x64, 0x02, 0x5e, 0x6d, 0x8a, 0xe4, 0x0b, 0x82, 0x1b, 0x83, 0x91, 0x76, 0x9a, 0xbb,
	0x05, 0x93, 0x4a, 0x9a, 0x92, 0x59, 0x67, 0x1e, 0x75, 0x05, 0x5e, 0xc0, 0x48, 0x30, 0x3b, 0xf2,
	0x8c, 0x8e, 0x04, 0xc3, 0x07, 0x10, 0x36, 0x77, 0xd4, 0x3a, 0x2b, 0x94, 0x1d, 0xca, 0xa3, 0x3d,
	0x80, 0x6f, 0x82, 0xa7, 0x04, 0x23, 0x13, 0xdb, 0xde, 0x7c, 0x36, 0x7c, 0x75, 0x46, 0xa6, 0x8e,
	0xaf, 0xce, 0x1a, 0x7e, 0x2d, 0xd6, 0x65, 0xa6, 0x4d, 0xc5, 0x89, 0x6f, 0xe1, 0x1e, 0xc0, 0x04,
	0xfc, 0xf7, 0xa6, 0xd6, 0x22, 0xff, 0x48, 0x02, 0x7b, 0xd6, 0x95, 0xc9, 0x0f, 0x04, 0xd1, 0x5f,
	0x2b, 0xda, 0xe9, 0xe2, 0x31, 0x84, 0xcd, 0xea, 0x4e, 0x45, 0x99, 0xcb, 0x36, 0xa3, 0xdb, 0x57,
	0x6c, 0x7a, 0x59, 0xe6, 0x92, 0x06, 0x17, 0xed, 0x17, 0x3e, 0x84, 0xe8, 0xad, 0x2c, 0x0a, 0xa1,
	0x1d, 0xcf, 0xd9, 0x05, 0x07, 0xd9, 0x86, 0x6b, 0xb5, 0x9d, 0x7c, 0x42, 0x10, 0x74, 0x53, 0xe1,
	0xfb, 0xb0, 0xe8, 0x9e, 0xcc, 0xa9, 0x0b, 0x04, 0xd9, 0xfb, 0xe6, 0x1d, 0x4a, 0x6d, 0x30, 0x87,
	0x10, 0x5d, 0xb6, 0x09, 0x17, 0xda, 0x8c, 0x42, 0x07, 0x2d, 0x19, 0xbe, 0x07, 0x33, 0x95, 0x55,
	0xbc, 0xd4, 0xad, 0x8a, 0x67, 0x55, 0x22, 0x87, 0x39, 0x8d, 0xbb, 0x10, 0xb6, 0x2d, 0x82, 0x59,
	0x57, 0x33, 0x1a, 0x38, 0x60, 0xc9, 0x92, 0xdf, 0x08, 0xe6, 0x5b, 0xef, 0xeb, 0x1f, 0x5f, 0xce,
	0x7f, 0xde, 0xdf, 0xa8, 0x8a, 0x92, 0xf1, 0x0f, 0x76, 0xad, 0x1e, 0x75, 0xc5, 0x76, 0x10, 0xd3,
	0x1d, 0x41, 0xf8, 0xc3, 0x20, 0x82, 0xab, 0x83, 0x08, 0x07, 0x41, 0x9c, 0xec, 0x7f, 0xdd, 0xc4,
	0xe8, 0xdb, 0x26, 0x46, 0x3f, 0x37, 0x31, 0xfa, 0xfc, 0x2b, 0xde, 0x7b, 0x33, 0x4e, 0x9f, 0xaa,
	0xd5, 0x6a, 0x6a, 0x7f, 0x19, 0x8f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x08, 0xf6, 0x38, 0x40,
	0x44, 0x04, 0x00, 0x00,
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Message_Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Proposal != nil {
		{
			size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHotstuff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Message_Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHotstuff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Message_Timeout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Timeout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Timeout != nil {
		{
			size, err := m.Timeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHotstuff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ProposalMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Justify) > 0 {
		i -= len(m.Justify)
		copy(dAtA[i:], m.Justify)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Justify)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Pk) > 0 {
		i -= len(m.Pk)
		copy(dAtA[i:], m.Pk)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Pk)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Pid) > 0 {
		i -= len(m.Pid)
		copy(dAtA[i:], m.Pid)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Pid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Timestamp != 0 {
		i = encodeVarintHotstuff(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Round != 0 {
		i = encodeVarintHotstuff(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VoteMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Pk) > 0 {
		i -= len(m.Pk)
		copy(dAtA[i:], m.Pk)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Pk)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Pid) > 0 {
		i -= len(m.Pid)
		copy(dAtA[i:], m.Pid)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Pid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Timestamp != 0 {
		i = encodeVarintHotstuff(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CommitInfo) > 0 {
		i -= len(m.CommitInfo)
		copy(dAtA[i:], m.CommitInfo)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.CommitInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if m.VoteInfo != nil {
		{
			size, err := m.VoteInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHotstuff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VoteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x22
	}
	if m.ParentRound != 0 {
		i = encodeVarintHotstuff(dAtA, i, uint64(m.ParentRound))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalRound != 0 {
		i = encodeVarintHotstuff(dAtA, i, uint64(m.ProposalRound))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TimoutMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimoutMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimoutMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Pk) > 0 {
		i -= len(m.Pk)
		copy(dAtA[i:], m.Pk)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Pk)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Pid) > 0 {
		i -= len(m.Pid)
		copy(dAtA[i:], m.Pid)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Pid)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Timestamp != 0 {
		i = encodeVarintHotstuff(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.Index != 0 {
		i = encodeVarintHotstuff(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x22
	}
	if m.ParentRound != 0 {
		i = encodeVarintHotstuff(dAtA, i, uint64(m.ParentRound))
		i--
		dAtA[i] = 0x18
	}
	if m.Round != 0 {
		i = encodeVarintHotstuff(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHotstuff(dAtA []byte, offset int, v uint64) int {
	offset -= sovHotstuff(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Message_Proposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != nil {
		l = m.Proposal.Size()
		n += 1 + l + sovHotstuff(uint64(l))
	}
	return n
}
func (m *Message_Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovHotstuff(uint64(l))
	}
	return n
}
func (m *Message_Timeout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timeout != nil {
		l = m.Timeout.Size()
		n += 1 + l + sovHotstuff(uint64(l))
	}
	return n
}
func (m *ProposalMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	if m.Round != 0 {
		n += 1 + sovHotstuff(uint64(m.Round))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovHotstuff(uint64(m.Timestamp))
	}
	l = len(m.Pid)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	l = len(m.Pk)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	l = len(m.Justify)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	if m.VoteInfo != nil {
		l = m.VoteInfo.Size()
		n += 1 + l + sovHotstuff(uint64(l))
	}
	l = len(m.CommitInfo)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovHotstuff(uint64(m.Timestamp))
	}
	l = len(m.Pid)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	l = len(m.Pk)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalRound != 0 {
		n += 1 + sovHotstuff(uint64(m.ProposalRound))
	}
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	if m.ParentRound != 0 {
		n += 1 + sovHotstuff(uint64(m.ParentRound))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TimoutMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	if m.Round != 0 {
		n += 1 + sovHotstuff(uint64(m.Round))
	}
	if m.ParentRound != 0 {
		n += 1 + sovHotstuff(uint64(m.ParentRound))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovHotstuff(uint64(m.Index))
	}
	if m.Timestamp != 0 {
		n += 1 + sovHotstuff(uint64(m.Timestamp))
	}
	l = len(m.Pid)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	l = len(m.Pk)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHotstuff(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHotstuff(x uint64) (n int) {
	return sovHotstuff(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotstuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProposalMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_Proposal{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VoteMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_Vote{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TimoutMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_Timeout{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotstuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotstuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pid = append(m.Pid[:0], dAtA[iNdEx:postIndex]...)
			if m.Pid == nil {
				m.Pid = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pk = append(m.Pk[:0], dAtA[iNdEx:postIndex]...)
			if m.Pk == nil {
				m.Pk = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Justify", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Justify = append(m.Justify[:0], dAtA[iNdEx:postIndex]...)
			if m.Justify == nil {
				m.Justify = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotstuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotstuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VoteInfo == nil {
				m.VoteInfo = &VoteInfo{}
			}
			if err := m.VoteInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitInfo = append(m.CommitInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.CommitInfo == nil {
				m.CommitInfo = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pid = append(m.Pid[:0], dAtA[iNdEx:postIndex]...)
			if m.Pid == nil {
				m.Pid = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pk = append(m.Pk[:0], dAtA[iNdEx:postIndex]...)
			if m.Pk == nil {
				m.Pk = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotstuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotstuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalRound", wireType)
			}
			m.ProposalRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalRound |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = append(m.ProposalId[:0], dAtA[iNdEx:postIndex]...)
			if m.ProposalId == nil {
				m.ProposalId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentRound", wireType)
			}
			m.ParentRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentRound |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = append(m.ParentId[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentId == nil {
				m.ParentId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotstuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimoutMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotstuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimoutMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimoutMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentRound", wireType)
			}
			m.ParentRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentRound |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = append(m.ParentId[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentId == nil {
				m.ParentId = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pid = append(m.Pid[:0], dAtA[iNdEx:postIndex]...)
			if m.Pid == nil {
				m.Pid = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pk = append(m.Pk[:0], dAtA[iNdEx:postIndex]...)
			if m.Pk == nil {
				m.Pk = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotstuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHotstuff(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHotstuff
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHotstuff
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHotstuff
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHotstuff
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHotstuff        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHotstuff          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHotstuff = fmt.Errorf("proto: unexpected end of group")
)
